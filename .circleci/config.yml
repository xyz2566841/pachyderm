# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

orbs:
  go: circleci/go@1.6.0

parameters:
  run_flaky_tests:
    type: string
    default: ""
  retain_slots:
    type: string
    default: "0"

jobs:
  circleci:
    parameters:
      bucket:
        type: string
    resource_class: large
    machine:
      image: ubuntu-2004:202101-01
    environment:
      PPS_BUCKETS: "6"
      GOPROXY: https://proxy.golang.org
      BUCKET: << parameters.bucket >>
      BIGQUERY_PROJECT: alysha-dev-006
      BIGQUERY_DATASET: pach_test
      BIGQUERY_TABLE: test_runs
      TEST_RESULTS_BUCKET: pach-test-data
    steps:
      - checkout
      - restore_cache:
         keys:
         - pach-build-dependencies-v2-{{ checksum "etc/testing/circle/install.sh" }}
         - pach-build-dependencies-v2-
      - run: etc/testing/circle/install.sh 
      - save_cache:
         key: pach-build-dependencies-v2-{{ checksum "etc/testing/circle/install.sh" }}
         paths:
         - cached-deps/
      - run: etc/testing/circle/start-minikube.sh 
      - run: etc/testing/circle/launch-loki.sh

      # The build cache will grow indefinitely, so we rotate the cache once a week. 
      # This ensures the time to restore the cache isn't longer than the speedup in compilation.
      - run: "echo $(($(date +%s)/604800)) > current_week"
      - restore_cache:
         keys:
         - pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
         - pach-go-build-cache-v1-master-{{ checksum "current_week" }}

      # Only restore the module cache based on an exact match for go.sum.
      # This also avoids accumulating old versions of modules over time.
      - restore_cache:
         keys:
         - pach-go-mod-cache-v2-{{ checksum "go.sum" }}
      - run: etc/testing/circle/build.sh 
      - run: etc/testing/circle/launch.sh 
      - run: etc/testing/circle/run_tests.sh 
      - save_cache:
         key: pach-go-mod-cache-v2-{{ checksum "go.sum" }}
         paths:
         - /home/circleci/.go_workspace/pkg/mod
      - save_cache:
         key: pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}-{{ .BuildNum }}
         paths:
         - /home/circleci/.gocache
      - run: etc/testing/circle/upload_stats.sh 
      - run:
          name: Dump debugging info in case of failure
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
  helm-build:
    docker:
      # specify the version
      - image: circleci/golang:1.15

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    working_directory: ~/project/etc/helm
    steps:
      - checkout:
          path: ~/project
      - run: mkdir /home/circleci/bin
      - restore_cache:
          keys:
            - go-mod-helm-v4-{{ checksum "go.sum" }}
      - run: wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /home/circleci/bin/helm && chmod +x /home/circleci/bin/helm
      - run: wget -q https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz -O - | tar -xzO kubeval > /home/circleci/bin/kubeval && chmod +x /home/circleci/bin/kubeval
      - run: make lint
      - run: make test
      - run: make kubeval-gcp
      - run: make kubeval-aws
      - save_cache:
          key: go-mod-helm-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  helm-publish:
    docker:
      - image: gcr.io/public-builds/chart-releaser:v1.2.1
    steps:
      ## Set CR_Token to GH Token
      ## package repo: cr package pachyderm
      ## create release: cr upload -o pachyderm -r helmchart
      ## cr index -o pachyderm -r helmchart -c https://pachyderm.github.io/helmchart --push
      - add_ssh_keys:
          fingerprints:
            - 3e:5e:ce:88:3a:42:ca:26:5e:90:66:f7:78:60:12:e1
      - run:
          name: Avoid hosts unknown for github
          command: echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==" >> ~/.ssh/known_hosts
      - run: git config --global user.email buildbot@pachyderm.io
      - run: git config --global user.name buildbot
      - run:
          name: Clone GitHub repository
          command: git clone -b ${CIRCLE_TAG} $CIRCLE_REPOSITORY_URL .
      - run: cd etc/helm && cr package pachyderm
      - run: cd etc/helm && cr upload -o pachyderm -r helmchart
      - run: cd etc/helm && cr index -o pachyderm -r helmchart -c https://pachyderm.github.io/helmchart --push

workflows:
  circleci:
    jobs:
      - circleci:
          matrix:
            parameters:
              bucket:
              - MISC
              # If you want to update the number of PPS buckets, you'll neet to
              # update the value of PPS_BUCKETS above
              - AUTH
              - ENTERPRISE
              - PFS
              - PPS1
              - PPS2
              - PPS3
              - PPS4
              - PPS5
              - PPS6
              - EXAMPLES
              - OBJECT
  helm:
    jobs:
      - helm-build:
          filters:
            tags:
              only: /^pachyderm-helm-\d+\.\d+\.\d+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$/
      - helm-publish:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^pachyderm-helm-\d+\.\d+\.\d+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$/
